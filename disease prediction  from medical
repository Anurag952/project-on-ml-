# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WEsx0rYIyj6yGGZuSLmPO1cTbRiI291S
"""

# Install necessary libraries
!pip install pandas scikit-learn matplotlib seaborn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# Load your dataset (replace with your actual dataset)
# For demonstration, let's generate a synthetic dataset using pandas

# Generating a synthetic dataset
data = pd.DataFrame({
    'age': [23, 45, 56, 67, 34, 65, 54, 23, 32, 41],
    'blood_pressure': [120, 140, 160, 180, 130, 150, 170, 110, 125, 135],
    'cholesterol': [230, 250, 300, 320, 210, 280, 310, 220, 240, 260],
    'diabetes': [0, 1, 1, 1, 0, 1, 1, 0, 0, 1],
    'smoker': [1, 0, 1, 1, 0, 1, 0, 0, 0, 1],
    'disease': [0, 1, 1, 1, 0, 1, 1, 0, 0, 1]
})

# Separate features and target variable
X = data[['age', 'blood_pressure', 'cholesterol', 'diabetes', 'smoker']]
y = data['disease']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the feature variables
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize and train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy * 100:.2f}%')
print('Confusion Matrix:')
print(conf_matrix)
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Plotting the confusion matrix
plt.figure(figsize=(6,4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['No Disease', 'Disease'], yticklabels=['No Disease', 'Disease'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()
